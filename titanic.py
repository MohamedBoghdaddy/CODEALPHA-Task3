# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uo2zXMdJd5P-1abjU6EF-KAw2ZTNn8RS
"""

# Import necessary libraries
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Function to show a random sample of the survival output
def print_random_sample(survival_output, sample_size=4):
    random_indices = random.sample(range(len(survival_output)), min(sample_size, len(survival_output)))
    print(survival_output.iloc[random_indices])

# Function to show the output of who survived based on relevant features
def show_survival_output(features, predictions):
    survival_output = pd.DataFrame({
        'Age': test['Age'],
        'Sex': test['Sex'].map({0: 'male', 1: 'female'}),
        'Pclass': test['Pclass'],
        'Survived': predictions
    })
    print("Survival Output:")
    print(survival_output)
    print_random_sample(survival_output)

# Load the dataset
train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

# Select relevant features
features = ['Age', 'Sex', 'Pclass']

# Feature Engineering
# Extract title from passenger names
train['Title'] = train['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)
test['Title'] = test['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)

# Combine rare titles into one category
rare_titles = ['Dona', 'Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer']
train['Title'] = train['Title'].replace(rare_titles, 'Rare')
test['Title'] = test['Title'].replace(rare_titles, 'Rare')

# Create a FamilySize feature
train['FamilySize'] = train['SibSp'] + train['Parch'] + 1
test['FamilySize'] = test['SibSp'] + test['Parch'] + 1

# Fill missing values in Age with median age
train['Age'].fillna(train['Age'].median(), inplace=True)
test['Age'].fillna(test['Age'].median(), inplace=True)

# Convert categorical variables into numeric
train['Sex'] = train['Sex'].map({'male': 0, 'female': 1})
test['Sex'] = test['Sex'].map({'male': 0, 'female': 1})

# Fill missing values in Fare with median fare
test['Fare'].fillna(test['Fare'].median(), inplace=True)

# Convert categorical variables into numeric
train = pd.get_dummies(train, columns=['Sex', 'Embarked', 'Title'])
test = pd.get_dummies(test, columns=['Sex', 'Embarked', 'Title'])

# Select features for model training
features = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'FamilySize',
            'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_Q', 'Embarked_S',
            'Title_Master', 'Title_Miss', 'Title_Mr', 'Title_Mrs', 'Title_Rare']
X = train[features]
y = train['Survived']

# Split the dataset into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Model evaluation
y_pred = model.predict(X_val)
accuracy = accuracy_score(y_val, y_pred)
print("Validation Accuracy:", accuracy)

# Final prediction
X_test = test[features]
predictions = model.predict(X_test)

#Show survival output based on relevant features
show_survival_output(features, predictions)

# Save predictions to a CSV file
submission = pd.DataFrame({'PassengerId': test['PassengerId'], 'Survived': predictions})
submission.to_csv('submission.csv', index=False)